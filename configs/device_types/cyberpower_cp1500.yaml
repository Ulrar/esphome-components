# CyberPower CP1500 Series Configuration
# Optimized for CyberPower CP1500EPFCLCD (VID: 0x0764, PID: 0x0501)
# Use with: packages: !include configs/device_types/cyberpower_cp1500.yaml

substitutions:
  # Device-specific overrides
  device_description: "CyberPower CP1500EPFCLCD Monitor"
  log_level: "DEBUG"
  
  # CyberPower-specific settings
  update_interval: "10s"  # CyberPower devices respond quickly
  protocol_timeout: "15s"

# Override UPS component with CyberPower-specific settings
ups_hid:
  id: ups_monitor
  update_interval: ${update_interval}
  protocol_timeout: ${protocol_timeout}
  protocol: cyberpower
  simulation_mode: ${simulation_mode}
  # Uncomment if auto-detection fails:
  # usb_vendor_id: 0x0764
  # usb_product_id: 0x0501

# Enhanced logging for CyberPower protocol debugging
logger:
  level: ${log_level}
  logs:
    ups_hid: DEBUG
    ups_hid.cyberpower: DEBUG

# CyberPower-specific sensors (complement extended_sensors.yaml)
sensor:
  # CyberPower-specific battery threshold (not in extended pack)
  - platform: ups_hid
    ups_hid_id: ups_monitor
    name: "Battery Charge Low Threshold"
    id: battery_charge_low
    type: battery_charge_low
    unit_of_measurement: "%"
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0

  # CyberPower power calculation with actual HID nominal power
  - platform: template
    name: "UPS Load Power (CyberPower)"
    id: ups_load_power_cp
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    lambda: |-
      if (!std::isnan(id(load_percentage).state)) {
        float cp_max_power = 900.0; // CP1500 default: 900W
        
        // Use HID nominal power if available (from extended sensors)
        if (!std::isnan(id(ups_realpower_nominal).state)) {
          cp_max_power = id(ups_realpower_nominal).state;
        }
        
        return (cp_max_power * id(load_percentage).state) / 100.0;
      }
      return NAN;
    update_interval: 30s

# CyberPower-specific text sensors (complement extended_sensors.yaml)  
text_sensor:
  # Separate battery vs UPS manufacture dates (CyberPower provides both)
  - platform: ups_hid
    ups_hid_id: ups_monitor
    name: "Battery Manufacture Date"
    id: battery_mfr_date
    type: battery_mfr_date
    icon: "mdi:calendar-battery"

# CyberPower-specific monitoring scripts
script:
  - id: cyberpower_detailed_status
    then:
      - logger.log:
          format: "CyberPower Status: Battery=%.1f%% (%.1fV/%.0fV), Load=%.1f%% (%.0fW/%.0fW), Input=%.1fV, Runtime=%.1fmin"
          args:
            - "id(battery_level).state"
            - "id(battery_voltage).state"
            - "id(battery_voltage_nominal).state"
            - "id(load_percentage).state"
            - "id(ups_load_power_cp).state"
            - "id(ups_realpower_nominal).state"
            - "id(input_voltage).state"
            - "id(runtime_remaining).state"
          level: INFO

# Enhanced monitoring for CyberPower features
interval:
  - interval: 120s
    then:
      - script.execute: cyberpower_detailed_status